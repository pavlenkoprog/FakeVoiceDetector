import logging
import subprocess

import numpy as np
from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile
from aiogram.utils import executor
import soundfile as sf
import os
from config import API_KEY

from AudioClassifierPipeline import AudioClassifierPipeline

API_TOKEN = API_KEY

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
pipeline = AudioClassifierPipeline()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
# logging.basicConfig(
#     level=logging.INFO,
#     format="%(asctime)s - %(levelname)s - %(message)s",
#     filename="E:/python_science/FakeSoundDetection/bot_logs.log",  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
#     filemode="a"
# )
# logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    logging.info(f"Received message from {message.from_user.username}: {message.text}")
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .wav –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")


async def result_message(message, results, img_buf):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    response_text = (
        f"–ú–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å –Ω–∞:\n"
        f"üîπ XGBoost: {results[0]:.2f}%\n"
        f"üîπ RandomForest: {results[1]:.2f}%\n"
        f"üîπ –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è: {results[2]:.2f}%\n"
        f"üîπ –ü—Ä–æ—Å—Ç–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å: {results[3]:.2f}%\n"
        f"–í–æ—Ç –∫–∞–∫ –º–æ–¥–µ–ª–∏ –≤–∏–¥–∞—Ç —Å–µ–≥–º–µ–Ω—Ç—ã –≤–∞—à–µ–π –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏"

    )
    await message.reply(response_text)

    photo = InputFile(img_buf, filename="plot.png")
    await bot.send_photo(chat_id=message.chat.id, photo=photo)


@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice(message: types.Message):
    logging.info(f"Received voice message from {message.from_user.username}")

    file_id = message.voice.file_id
    new_file = await bot.get_file(file_id)

    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    ogg_path = f"Downloads/voice_{message.message_id}.ogg"
    wav_path = f"Downloads/voice_{message.message_id}.wav"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await new_file.download(destination_file=ogg_path)
    logging.info(f"Voice message saved as {ogg_path}")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º .ogg –≤ .wav
    try:
        subprocess.run(["ffmpeg", "-i", ogg_path, "-ar", "44100", "-ac", "1", wav_path], check=True)
        logging.info(f"Converted {ogg_path} to {wav_path}")
    except subprocess.CalledProcessError as e:
        logging.error(f"FFmpeg conversion failed: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        os.remove(ogg_path)
        return

    # –ß–∏—Ç–∞–µ–º WAV —Ñ–∞–π–ª
    data, samplerate = sf.read(wav_path)
    if len(data.shape) > 1:
        data = np.mean(data, axis=1)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
    results, img_buf = pipeline.process_audio(data, samplerate)

    await result_message(message, results, img_buf)

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    # TODO –≤–∫–ª—é—á–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ —á—Ç–æ–±—ã –æ–Ω –Ω–µ –∑–∞–Ω–∏–º–∞–ª–∏ –º–µ—Å—Ç–æ
    # os.remove(ogg_path)
    # os.remove(wav_path)



@dp.message_handler(content_types=[types.ContentType.DOCUMENT, types.ContentType.AUDIO])
async def handle_audio(message: types.Message):
    logging.info(f"Received audio message from {message.from_user.username}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ DOCUMENT
    if message.content_type == types.ContentType.DOCUMENT:
        if message.document.mime_type == 'audio/vnd.wav' or message.document.file_name.endswith('.wav'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = message.document.file_size
            max_file_size = 20 * 1024 * 1024  # 20 MB
            if file_size > max_file_size:
                await message.reply("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 20–ú–ë.")
                return

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            file_id = message.document.file_id
            new_file = await bot.get_file(file_id)
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∞–π–ª–æ–º

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ AUDIO
    elif message.content_type == types.ContentType.AUDIO:
        if message.audio.mime_type == 'audio/wav' or message.audio.file_name.endswith('.wav'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = message.audio.file_size
            max_file_size = 20 * 1024 * 1024  # 20 MB
            if file_size > max_file_size:
                await message.reply("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 20–ú–ë.")
                return

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            file_id = message.audio.file_id
            new_file = await bot.get_file(file_id)
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∞–π–ª–æ–º

    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .wav –º–µ–Ω–µ–µ 20 MB")

    file_path = f"Downloads/audio_{message.message_id}.wav"
    await new_file.download(destination_file=file_path)
    logging.info(f".wav file saved as {file_path}")

    # –ß–∏—Ç–∞–µ–º WAV —Ñ–∞–π–ª
    data, samplerate = sf.read(file_path)
    if len(data.shape) > 1:
        data = np.mean(data, axis=1)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
    results, img_buf = pipeline.process_audio(data, samplerate)

    await result_message(message, results, img_buf)

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    # TODO –≤–∫–ª—é—á–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ —á—Ç–æ–±—ã –æ–Ω –Ω–µ –∑–∞–Ω–∏–º–∞–ª–∏ –º–µ—Å—Ç–æ
    # os.remove(file_path)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç–∞)
@dp.message_handler()
async def handle_other(message: types.Message):
    logging.info(f"Received other message from {message.from_user.username}: {message.text}")
    await message.reply("–Ø –æ–∂–∏–¥–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .wav –º–µ–Ω–µ–µ 20 MB. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
